# MAXXFAN PROTOCOL EXAMPLE
#
# Please modify this configuration to suit your needs.
esphome:
  name: maxxfan-example
  friendly_name: Maxxfan Example

esp32:
  board: esp32-c3-devkitm-1
  framework:
    type: arduino

logger:

# Import the maxxfan protocol component.
external_components:
  # Import the component from Github.
  # - source: github://j9brown/esphome-maxxfan-protocol@main
  #   components: [ maxxfan_protocol ]
  # Import the component from a local directory.
  - source: components

# Enable the Maxxfan protocol.
maxxfan_protocol:

# Configure the IR receiver.
remote_receiver:
  - id: ir_receiver
    pin:
      number: 2  # Change this to the pin your IR receiver is attached to
      mode: input
      inverted: true
    rmt_channel: 2
    memory_blocks: 2
    dump: maxxfan
    on_maxxfan:
      then:
        lambda: |-
          // The variable 'x' holds a MaxxfanData object parsed from the received message
          ESP_LOGD("maxxfan-example", "Fan state: %s", x.fan_on ? "on" : "off");

# Configure the IR transmitter.
remote_transmitter:
  - id: ir_transmitter
    pin:
      number: 10  # Change this to the pin your IR transmitter is attached to
      inverted: false
    carrier_duty_percent: 50%

# When a button is pressed, transmit a message to turn the fan on low speed in exhaust mode.
# Note that each message sets all of the fan's parameters at once.  Any parameters you don't specify
# in the action will be set to their default values.
binary_sensor:
  - platform: gpio
    id: example_button
    pin:
      number: 9  # Change this to the pin of a button on your board
      inverted: true
    on_click:
      then:
        - logger.log: "Transmitting message to Maxxfan"
        - remote_transmitter.transmit_maxxfan:
            transmitter_id: ir_transmitter
            fan_on: true
            fan_exhaust: true
            fan_speed: 10
            cover_open: true
            auto_mode: false
            #auto_temperature:
            #special:
            #warn:
